1.Create an EC2 instance
2.Install an oneAgent
3.Setup an web appliction .
4.sudo yum update -y
sudo yum install httpd -y
sudo systemctl start httpd
sudo systemctl enable httpd

5.http://<EC2_PUBLIC_IP>
6.Anyalize the logs and metrix

EC2=> WEB + RDBS

sudo apt update
sudo apt install apache2 -y
sudo systemctl start apache2
sudo systemctl enable apache2
sudo systemctl status apache2
sudo apt-get install apache2 php libapache2-mod-php php-mcrypt php-mysql php-curl php-xml php-memcached
sudo apt-get install git mysql-server
sudo mysql
CREATE DATABASE simple_lamp;
CREATE USER 'username'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON simple_lamp.* TO 'username'@'localhost';
quit
cd /var
sudo chown -R ubuntu:ubuntu www
cd /var/www/html
git clone https://github.com/qyjohn/simple-lamp

cd /var/www/html/simple-lamp
mysql -u username -p simple_lamp < simple_lamp.sql
cd /var/www/html/simple-lamp
sudo chown -R www-data:www-data uploads

==Remove existing mysql and re-install
sudo mysql_secure_installation
sudo apt-get remove --purge mysql-server
 sudo apt-get autoremove
sudo apt-get autoclean
sudo apt-get install git mysql-server
sudo mysql_secure_installation

vim config.php
i==> allow us to edit
press esc
:wq==> is used to save and exit from a file
cat config.php

https://github.com/qyjohn/simple-lamp/tree/master

Problems encountered

1.CHeck the connection its pointing to correct DB
2.Db should be accessible from outside of instance by using IP


Mysql config file
========================
# The MySQL database server configuration file.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

# Here is entries for some specific programs
# The following values assume you have at least 32M ram

[mysqld]
#
# * Basic Settings
#
user            = mysql
# pid-file      = /var/run/mysqld/mysqld.pid
# socket        = /var/run/mysqld/mysqld.sock
# port          = 3306
# datadir       = /var/lib/mysql


# If MySQL is running as a replication slave, this should be
# changed. Ref https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_tmpdir
# tmpdir                = /tmp
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address            = 0.0.0.0
mysqlx-bind-address     = 127.0.0.1
#
# * Fine Tuning
#
key_buffer_size         = 16M
# max_allowed_packet    = 64M
# thread_stack          = 256K

# thread_cache_size       = -1

# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched
myisam-recover-options  = BACKUP

# max_connections        = 151

# table_open_cache       = 4000

#
# * Logging and Replication
#
# Both location gets rotated by the cronjob.
#
# Log all queries
# Be aware that this log type is a performance killer.
# general_log_file        = /var/log/mysql/query.log
# general_log             = 1
#
# Error log - should be very few entries.
#
log_error = /var/log/mysql/error.log
#
# Here you can see queries with especially long duration
slow_query_log          = 1
slow_query_log_file     = /var/log/mysql/mysql-slow.log
long_query_time = 2
log-queries-not-using-indexes= 1
#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
# server-id             = 1
# log_bin                       = /var/log/mysql/mysql-bin.log
# binlog_expire_logs_seconds    = 2592000
max_binlog_size   = 100M
# binlog_do_db          = include_database_name
# binlog_ignore_db      = include_database_name
performance_schema=ON


==========================